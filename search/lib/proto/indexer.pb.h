// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_indexer_2eproto__INCLUDED
#define PROTOBUF_indexer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000003
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000003 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace runcible {
namespace search {

// Internal implementation detail -- do not call these.
void  protobuf_BuildDesc_indexer_2eproto();
void protobuf_BuildDesc_indexer_2eproto_AssignGlobalDescriptors(
    ::google::protobuf::FileDescriptor* file);

class IndexItem;

// ===================================================================

class IndexItem : public ::google::protobuf::Message {
 public:
  IndexItem();
  virtual ~IndexItem();
  
  IndexItem(const IndexItem& from);
  
  inline IndexItem& operator=(const IndexItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexItem& default_instance();
  void Swap(IndexItem* other);
  
  // implements Message ----------------------------------------------
  
  IndexItem* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline ::std::string* mutable_url();
  
  // required string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline ::std::string* mutable_title();
  
  // required string plain_contents = 3;
  inline bool has_plain_contents() const;
  inline void clear_plain_contents();
  inline const ::std::string& plain_contents() const;
  inline void set_plain_contents(const ::std::string& value);
  inline void set_plain_contents(const char* value);
  inline ::std::string* mutable_plain_contents();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* url_;
  static const ::std::string _default_url_;
  ::std::string* title_;
  static const ::std::string _default_title_;
  ::std::string* plain_contents_;
  static const ::std::string _default_plain_contents_;
  friend void protobuf_BuildDesc_indexer_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static IndexItem* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// IndexItem

// required string url = 1;
inline bool IndexItem::has_url() const {
  return _has_bit(0);
}
inline void IndexItem::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& IndexItem::url() const {
  return *url_;
}
inline void IndexItem::set_url(const ::std::string& value) {
  _set_bit(0);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void IndexItem::set_url(const char* value) {
  _set_bit(0);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline ::std::string* IndexItem::mutable_url() {
  _set_bit(0);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// required string title = 2;
inline bool IndexItem::has_title() const {
  return _has_bit(1);
}
inline void IndexItem::clear_title() {
  if (title_ != &_default_title_) {
    title_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& IndexItem::title() const {
  return *title_;
}
inline void IndexItem::set_title(const ::std::string& value) {
  _set_bit(1);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void IndexItem::set_title(const char* value) {
  _set_bit(1);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline ::std::string* IndexItem::mutable_title() {
  _set_bit(1);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  return title_;
}

// required string plain_contents = 3;
inline bool IndexItem::has_plain_contents() const {
  return _has_bit(2);
}
inline void IndexItem::clear_plain_contents() {
  if (plain_contents_ != &_default_plain_contents_) {
    plain_contents_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& IndexItem::plain_contents() const {
  return *plain_contents_;
}
inline void IndexItem::set_plain_contents(const ::std::string& value) {
  _set_bit(2);
  if (plain_contents_ == &_default_plain_contents_) {
    plain_contents_ = new ::std::string;
  }
  plain_contents_->assign(value);
}
inline void IndexItem::set_plain_contents(const char* value) {
  _set_bit(2);
  if (plain_contents_ == &_default_plain_contents_) {
    plain_contents_ = new ::std::string;
  }
  plain_contents_->assign(value);
}
inline ::std::string* IndexItem::mutable_plain_contents() {
  _set_bit(2);
  if (plain_contents_ == &_default_plain_contents_) {
    plain_contents_ = new ::std::string;
  }
  return plain_contents_;
}


}  // namespace search
}  // namespace runcible
#endif  // PROTOBUF_indexer_2eproto__INCLUDED
